/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.pharmacy;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.*;
/**
 *
 * @author user
 */
public class CustOrder extends javax.swing.JFrame {

    /**
     * Creates new form CustOrder
     */
    Connection con;
    public CustOrder() {
        initComponents();
        try {
            Class.forName("oracle.jdbc.OracleDriver");
            try {
                con = DriverManager.getConnection("jdbc:oracle:thin:@//Krishnavarun:1521", "system", "2005");
            }
            catch(SQLException ex) {
                Logger.getLogger(CustOrder.class.getName()).log(Level.SEVERE,null,ex);
            }
        }
        catch(ClassNotFoundException ex) {
            Logger.getLogger(CustOrder.class.getName()).log(Level.SEVERE,null,ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtMedicineName = new javax.swing.JTextField();
        txtCustomerName = new javax.swing.JTextField();
        txtDoctorName = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        txtOrderDate = new javax.swing.JTextField();
        txtDeliveryDate = new javax.swing.JTextField();
        Add = new javax.swing.JButton();
        Bill = new javax.swing.JButton();
        back = new javax.swing.JButton();
        CLEAR = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtCustomerOrderId = new javax.swing.JTextField();
        totAmount = new javax.swing.JButton();
        txtTotalAmount = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        totAmt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        remMedicine = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("MEDICINE NAME");

        jLabel2.setText("CUSTOMER NAME");

        jLabel3.setText("QUANTITY");

        jLabel4.setText("ORDER DATE");

        jLabel5.setText("DELIVERY DATE");

        jLabel6.setText("DOCTOR NAME");

        txtDoctorName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorNameActionPerformed(evt);
            }
        });

        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        txtOrderDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderDateActionPerformed(evt);
            }
        });

        txtDeliveryDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDeliveryDateActionPerformed(evt);
            }
        });

        Add.setText("ADD");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Bill.setText("PAY");
        Bill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BillActionPerformed(evt);
            }
        });

        back.setText("BACK");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        CLEAR.setText("CLEAR");
        CLEAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLEARActionPerformed(evt);
            }
        });

        jLabel7.setText("MEDICINE ORDER");

        txtCustomerOrderId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerOrderIdActionPerformed(evt);
            }
        });

        totAmount.setText("TOTAL AMOUNT");
        totAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totAmountActionPerformed(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine", "Quantity", "Unit Price", "Order Date", "Delivery Date"
            }
        ));
        jScrollPane1.setViewportView(Table);

        totAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totAmtActionPerformed(evt);
            }
        });

        jLabel8.setText("TOTAL AMOUNT:");

        remMedicine.setText("Remove");
        remMedicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remMedicineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtCustomerOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(279, 279, 279)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(totAmount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Bill, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(remMedicine)
                        .addGap(156, 156, 156)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(totAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMedicineName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDeliveryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(txtTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CLEAR)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCustomerOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCustomerName, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMedicineName, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDoctorName))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQuantity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOrderDate))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDeliveryDate))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTotalAmount)
                                    .addComponent(CLEAR, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Bill, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(totAmount)
                                    .addComponent(remMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(13, 13, 13))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(totAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtDoctorNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorNameActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void txtOrderDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderDateActionPerformed

    private void txtDeliveryDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDeliveryDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDeliveryDateActionPerformed

    private void BillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BillActionPerformed
       String customerName = txtCustomerName.getText().trim();
    int custOrderId;

    try {
        custOrderId = Integer.parseInt(txtCustomerOrderId.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid customer order ID: " + e.getMessage());
        return;
    }

    try {
        if (con == null || con.isClosed()) {
            con = DriverManager.getConnection("jdbc:oracle:thin:@//Krishnavarun:1521", "system", "2005");
        }

        int customerId = fetchId(con, "Customer", "customer_name", customerName, "customer_id");
        if (customerId == -1) {
            JOptionPane.showMessageDialog(this, "Invalid customer name!");
            return;
        }

        boolean isPremium = false;
        String premiumCheckQuery = "SELECT premium_subscription FROM Customer WHERE customer_id = ?";
        try (PreparedStatement pstPremium = con.prepareStatement(premiumCheckQuery)) {
            pstPremium.setInt(1, customerId);
            try (ResultSet rsPremium = pstPremium.executeQuery()) {
                if (rsPremium.next()) {
                    isPremium = "Y".equalsIgnoreCase(rsPremium.getString("premium_subscription"));
                }
            }
        }

        String billQuery = "SELECT cu.customer_name, m.medicine_name, cl.quantity, cl.unit_price, m.discount, c.order_date, c.delivery_date, p.pay_amount " +
                           "FROM customer_order_list cl " +
                           "JOIN customer_order c ON cl.cust_order_id = c.cust_order_id " +
                           "JOIN customer cu ON c.customer_id = cu.customer_id " +
                           "JOIN payment p ON c.payment_id = p.payment_id " +
                           "JOIN medicine m ON m.medicine_id = cl.medicine_id " +
                           "WHERE c.customer_id = ? AND c.cust_order_id = ?";

        try (PreparedStatement pst = con.prepareStatement(billQuery)) {
            pst.setInt(1, customerId);
            pst.setInt(2, custOrderId);

            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    StringBuilder billDetails = new StringBuilder();
                    double totalAmount = 0;

                    do {
                        String customerNameFetched = rs.getString("customer_name");
                        String medicineName = rs.getString("medicine_name");
                        int quantity = rs.getInt("quantity");
                        double unitPrice = rs.getDouble("unit_price");
                        double discountPrice = rs.getDouble("discount");
                        Date orderDateFetched = rs.getDate("order_date");
                        Date deliveryDate = rs.getDate("delivery_date");

                        if (isPremium) {
                            unitPrice -= discountPrice;
                        }

                        billDetails.append("Customer Name: ").append(customerNameFetched)
                                   .append(", Medicine Name: ").append(medicineName)
                                   .append(", Quantity: ").append(quantity)
                                   .append(", Unit Price: ").append(unitPrice)
                                   .append(", Order Date: ").append(orderDateFetched)
                                   .append(", Delivery Date: ").append(deliveryDate)
                                   .append("\n");

                        totalAmount += unitPrice * quantity;
                        totAmt.setText(String.valueOf(totalAmount));
                    } while (rs.next());

                    billDetails.append("\nTOTAL AMOUNT PAID: ").append(totalAmount);
                    
                } else {
                    JOptionPane.showMessageDialog(this, "No orders found for the specified customer. Please recheck IDs.");
                }
            }
            
        }
    PreparedStatement pst1 = con.prepareStatement(billQuery);
     pst1.setInt(1, customerId);
     pst1.setInt(2, custOrderId);
    ResultSet rs = pst1.executeQuery();
    DefaultTableModel model =new DefaultTableModel(new String[]{"Medicine","Quantity","Unit Price","Order Date","Delivery Date"},0);
        while(rs.next())
        {
            String Medicine_name=rs.getString("medicine_name");
            String Quantity=String.valueOf(rs.getInt("quantity"));
            String unit_price=String.valueOf(rs.getInt("unit_price"));
            String ord_date=rs.getString("order_date");
            String del_date=rs.getString("delivery_date");
            System.out.println(Medicine_name+Quantity+unit_price+ord_date+del_date);
            model.addRow(new Object[]{Medicine_name,Quantity,unit_price,ord_date,del_date});
        }
        Table.setModel(model);
         if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No matching records found.");
        }
         
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error generating bill: " + ex.getMessage());
    }
    

    

    }//GEN-LAST:event_BillActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
    String customerName = txtCustomerName.getText().trim();
    String doctorName = txtDoctorName.getText().trim();
    String medicineName = txtMedicineName.getText().trim();
    int quantity;
    Date orderDate, deliveryDate;
    int custOrderId;

    try {
        quantity = Integer.parseInt(txtQuantity.getText().trim());
        orderDate = Date.valueOf(txtOrderDate.getText().trim());
        deliveryDate = Date.valueOf(txtDeliveryDate.getText().trim());
    } catch (IllegalArgumentException e) {
        JOptionPane.showMessageDialog(this, "Invalid input: " + e.getMessage());
        return;
    }

  //  JOptionPane.showMessageDialog(this, customerName + " " + doctorName + " " + medicineName);

    try {
        if (con == null || con.isClosed()) {
            con = DriverManager.getConnection("jdbc:oracle:thin:@//Krishnavarun:1521", "system", "2005");
        }

        // Fetch customer_id, doctor_id, medicine_id
        int customerId = fetchId(con, "Customer", "customer_name", customerName, "customer_id");
        int doctorId = fetchId(con, "Doctor", "doctor_name", doctorName, "doctor_id");
        int medicineId = fetchId(con, "Medicine", "medicine_name", medicineName, "medicine_id");

        // Check if IDs are valid
        if (customerId == -1 || doctorId == -1 || medicineId == -1) {
            JOptionPane.showMessageDialog(this, "Invalid customer, doctor, or medicine name!");
            return;
        }

        // Fetch unit price and stock of medicine
        double unitPrice = fetchUnitPrice(con, medicineId);
        int stock = fetchStock(con, medicineId);

        if (unitPrice == -1 || stock == -1) {
            JOptionPane.showMessageDialog(this, "Unable to fetch unit price or stock for the medicine!");
            return;
        }

        if (quantity > stock) {
            JOptionPane.showMessageDialog(this, "Medicine out of stock!");
            return;
        }

        double totalAmount = unitPrice * quantity;

        // Check if there's an existing payment_id for the customer on the same delivery date
        int paymentId = fetchExistingPaymentId(con, customerId, deliveryDate);

        con.setAutoCommit(false);

        if (paymentId != -1) {
            // Existing payment found, update the pay_amount
            updatePaymentAmount(con, paymentId, totalAmount);
        } else {
            // No existing payment found, generate new payment_id
            paymentId = generateNewPaymentId(con);

            // Insert into Payment table
            String paymentQuery = "INSERT INTO Payment (payment_id, pay_date, pay_amount) VALUES (?, ?, ?)";
            try (PreparedStatement pstPayment = con.prepareStatement(paymentQuery)) {
                pstPayment.setInt(1, paymentId);
                pstPayment.setDate(2, deliveryDate);
                pstPayment.setDouble(3, totalAmount);
                pstPayment.executeUpdate();
            }
        }

        String custOrderIdText = txtCustomerOrderId.getText().trim();

        if (custOrderIdText.isEmpty()) {
            // Generate new cust_order_id
            custOrderId = generateNewOrderId(con);
            txtCustomerOrderId.setText(String.valueOf(custOrderId));

            // Insert into Customer_order
            String orderQuery = "INSERT INTO Customer_order (cust_order_id, customer_id, order_date, delivery_date, doctor_id, payment_id) VALUES (?, ?, ?, ?, ?, ?)";
            try (PreparedStatement pstOrder = con.prepareStatement(orderQuery)) {
                pstOrder.setInt(1, custOrderId);
                pstOrder.setInt(2, customerId);
                pstOrder.setDate(3, orderDate);
                pstOrder.setDate(4, deliveryDate);
                pstOrder.setInt(5, doctorId);
                pstOrder.setInt(6, paymentId);
                pstOrder.executeUpdate();
            }
        } else {
            custOrderId = Integer.parseInt(custOrderIdText);
        }

        // Insert into Customer_order_list
        String orderListQuery = "INSERT INTO Customer_order_list (cust_order_id, medicine_id, quantity, unit_price) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstOrderList = con.prepareStatement(orderListQuery)) {
            pstOrderList.setInt(1, custOrderId);
            pstOrderList.setInt(2, medicineId);
            pstOrderList.setInt(3, quantity);
            pstOrderList.setDouble(4, unitPrice);
            pstOrderList.executeUpdate();
        }

        // Update stock in Medicine table
        String updateStockQuery = "UPDATE Medicine SET stock = stock - ? WHERE medicine_id = ?";
        try (PreparedStatement pstUpdateStock = con.prepareStatement(updateStockQuery)) {
            pstUpdateStock.setInt(1, quantity);
            pstUpdateStock.setInt(2, medicineId);
            pstUpdateStock.executeUpdate();
        }

        // Commit transaction
        con.commit();
        JOptionPane.showMessageDialog(this, "Order, order list items, and payment inserted successfully!");

    } catch (SQLException ex) {
        try {
            con.rollback();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error rolling back transaction: " + e.getMessage());
        }
        JOptionPane.showMessageDialog(this, "Error inserting order: " + ex.getMessage());
    } finally {
        try {
            con.setAutoCommit(true);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error setting auto-commit: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_AddActionPerformed

    private void CLEARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLEARActionPerformed
    txtCustomerName.setText("");
    txtDoctorName.setText("");
    txtMedicineName.setText("");
    txtQuantity.setText("");
    txtOrderDate.setText("");
    txtDeliveryDate.setText("");
    txtCustomerOrderId.setText("");
    JOptionPane.showMessageDialog(this, "Form cleared!");
    }//GEN-LAST:event_CLEARActionPerformed

    private void txtCustomerOrderIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerOrderIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustomerOrderIdActionPerformed

    private void totAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totAmountActionPerformed
         String customerName = txtCustomerName.getText().trim();
    int custOrderId = Integer.parseInt(txtCustomerOrderId.getText());
    Date orderDate;

    /*try {
        orderDate = Date.valueOf(txtOrderDate.getText().trim());
    } catch (IllegalArgumentException e) {
        JOptionPane.showMessageDialog(this, "Invalid order date: " + e.getMessage());
        return;
    }*/

    try {
        if (con == null || con.isClosed()) {
            con = DriverManager.getConnection("jdbc:oracle:thin:@//Krishnavarun:1521", "system", "2005");
        }

        int customerId = fetchId(con, "Customer", "customer_name", customerName, "customer_id");
        if (customerId == -1) {
            JOptionPane.showMessageDialog(this, "Invalid customer name!");
            return;
        }

        boolean isPremium = false;
        String premiumCheckQuery = "SELECT premium_subscription FROM Customer WHERE customer_id = ?";
        try (PreparedStatement pstPremium = con.prepareStatement(premiumCheckQuery)) {
            pstPremium.setInt(1, customerId);
            try (ResultSet rsPremium = pstPremium.executeQuery()) {
                if (rsPremium.next()) {
                    isPremium = "Y".equalsIgnoreCase(rsPremium.getString("premium_subscription"));
                }
            }
        }

        String billQuery = "SELECT cu.customer_name, m.medicine_name, cl.quantity, cl.unit_price, m.discount, c.order_date, c.delivery_date, p.pay_amount " +
                           "FROM customer_order_list cl " +
                           "JOIN customer_order c ON cl.cust_order_id = c.cust_order_id " +
                           "JOIN customer cu ON c.customer_id = cu.customer_id " +
                           "JOIN payment p ON c.payment_id = p.payment_id " +
                           "JOIN medicine m ON m.medicine_id = cl.medicine_id " +
                           "WHERE c.customer_id = ? AND c.cust_order_id = ?";

        try (PreparedStatement pst = con.prepareStatement(billQuery)) {
            pst.setInt(1, customerId);
            pst.setInt(2, custOrderId);

            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    double totalAmount = 0;

                    do {
                        int quantity = rs.getInt("quantity");
                        double unitPrice = rs.getDouble("unit_price");
                        double discountPrice = rs.getDouble("discount");

                        if (isPremium) {
                            unitPrice -= discountPrice;
                        }

                        totalAmount += unitPrice * quantity;
                    } while (rs.next());

                    txtTotalAmount.setText(String.valueOf(totalAmount));
                } else {
                    JOptionPane.showMessageDialog(this, "No orders found for the specified customer.");
                    txtTotalAmount.setText("");
                }
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error generating bill: " + ex.getMessage());
    }
    }//GEN-LAST:event_totAmountActionPerformed

    private void totAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totAmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totAmtActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_backActionPerformed

    private void remMedicineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remMedicineActionPerformed
     String medicineName = txtMedicineName.getText().trim();
    int custOrderId;
    int quantity;

    try {
        custOrderId = Integer.parseInt(txtCustomerOrderId.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid customer order ID: " + e.getMessage());
        return;
    }

    try {
        if (txtQuantity.getText().trim().isEmpty()) {
            quantity = 0;
        } else {
            quantity = Integer.parseInt(txtQuantity.getText().trim());
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity: " + e.getMessage());
        return;
    }

    try {
        if (con == null || con.isClosed()) {
            con = DriverManager.getConnection("jdbc:oracle:thin:@//Krishnavarun:1521", "system", "2005");
        }

        // Fetch medicine_id using medicine name
        int medicineId = fetchId(con, "Medicine", "medicine_name", medicineName, "medicine_id");
        if (medicineId == -1) {
            JOptionPane.showMessageDialog(this, "Invalid medicine name!");
            return;
        }

        if (quantity <= 0) {
            // Remove the medicine from the customer_order_list
            String deleteQuery = "DELETE FROM customer_order_list WHERE cust_order_id = ? AND medicine_id = ?";
            try (PreparedStatement pst = con.prepareStatement(deleteQuery)) {
                pst.setInt(1, custOrderId);
                pst.setInt(2, medicineId);

                int rowsAffected = pst.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Medicine removed from order successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "No matching medicine found in the order list.");
                }
            }
        } else {
            // Reduce the quantity of the medicine in the customer_order_list
            String updateQuery = "UPDATE customer_order_list SET quantity = quantity - ? WHERE cust_order_id = ? AND medicine_id = ?";
            try (PreparedStatement pst = con.prepareStatement(updateQuery)) {
                pst.setInt(1, quantity);
                pst.setInt(2, custOrderId);
                pst.setInt(3, medicineId);

                int rowsAffected = pst.executeUpdate();
                if (rowsAffected > 0) {
                    // Check if the new quantity is zero or negative, and delete the row if so
                    String checkQuantityQuery = "SELECT quantity FROM customer_order_list WHERE cust_order_id = ? AND medicine_id = ?";
                    try (PreparedStatement pstCheck = con.prepareStatement(checkQuantityQuery)) {
                        pstCheck.setInt(1, custOrderId);
                        pstCheck.setInt(2, medicineId);

                        try (ResultSet rs = pstCheck.executeQuery()) {
                            if (rs.next()) {
                                int newQuantity = rs.getInt("quantity");
                                if (newQuantity <= 0) {
                                    String deleteQuery = "DELETE FROM customer_order_list WHERE cust_order_id = ? AND medicine_id = ?";
                                    try (PreparedStatement pstDelete = con.prepareStatement(deleteQuery)) {
                                        pstDelete.setInt(1, custOrderId);
                                        pstDelete.setInt(2, medicineId);
                                        pstDelete.executeUpdate();
                                    }
                                }
                            }
                        }
                    }

                    JOptionPane.showMessageDialog(this, "Medicine quantity updated successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "No matching medicine found in the order list.");
                }
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error updating order: " + ex.getMessage());
    }

    }//GEN-LAST:event_remMedicineActionPerformed
private int fetchStock(Connection con, int medicineId) throws SQLException {
    String query = "SELECT stock FROM Medicine WHERE medicine_id = ?";
    try (PreparedStatement pst = con.prepareStatement(query)) {
        pst.setInt(1, medicineId);
        try (ResultSet rs = pst.executeQuery()) {
            if (rs.next()) {
                return rs.getInt("stock");
            }
        }
    }
    return -1;
}
private int fetchId(Connection con, String tableName, String columnName, String value, String idColumn) throws SQLException {
    String query = "SELECT " + idColumn + " FROM " + tableName + " WHERE " + columnName + " = ?";
    //System.out.println("Executing query: " + query + " with value: " + value.trim()); // Debugging line

    try (PreparedStatement pst = con.prepareStatement(query)) {
        pst.setString(1, value.trim()); // Trim any extra spaces
        //System.out.println("PreparedStatement: " + pst.toString()); // Log the prepared statement
        try (ResultSet rs = pst.executeQuery()) {
            if (rs.next()) {
                int id = rs.getInt(1);
                //System.out.println("Fetched ID: " + id); // Log the fetched ID
                return id;
            } else {
               // System.out.println("No ID found for value: " + value.trim()); // Log when no ID is found
            }
        }
    } catch (SQLException ex) {
        throw ex; // Rethrow the exception after logging it
    }
    return -1; // Not found
}

private double fetchUnitPrice(Connection con, int medicineId) throws SQLException {
    String query = "SELECT price FROM Medicine WHERE medicine_id = ?";
    try (PreparedStatement pst = con.prepareStatement(query)) {
        pst.setInt(1, medicineId);
        try (ResultSet rs = pst.executeQuery()) {
            if (rs.next()) {
                return rs.getDouble(1);
            }
        }
    }
    return -1; // Not found
}

private int generateNewOrderId(Connection con) throws SQLException {
    String query = "SELECT MAX(cust_order_id) FROM Customer_order";
    try (Statement st = con.createStatement(); ResultSet rs = st.executeQuery(query)) {
        if (rs.next()) {
            return rs.getInt(1) + 1;
        }
    }
    return 1; // If no records found, start with ID 1
}

private int generateNewPaymentId(Connection con) throws SQLException {
    String query = "SELECT MAX(payment_id) FROM Payment";
    try (Statement st = con.createStatement(); ResultSet rs = st.executeQuery(query)) {
        if (rs.next()) {
            return rs.getInt(1) + 1;
        }
    }
    return 1; // If no records found, start with ID 1
}
private int fetchExistingPaymentId(Connection con, int customerId, Date deliveryDate) throws SQLException {
    String query = "SELECT p.payment_id " +
                   "FROM Payment p " +
                   "JOIN Customer_order co ON p.payment_id = co.payment_id " +
                   "WHERE co.customer_id = ? AND p.pay_date = ?";
    try (PreparedStatement pst = con.prepareStatement(query)) {
        pst.setInt(1, customerId);
        pst.setDate(2, deliveryDate);
        try (ResultSet rs = pst.executeQuery()) {
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
    }
    return -1; // No existing payment found
}

private void updatePaymentAmount(Connection con, int paymentId, double additionalAmount) throws SQLException {
    String query = "UPDATE Payment SET pay_amount = pay_amount + ? WHERE payment_id = ?";
    try (PreparedStatement pst = con.prepareStatement(query)) {
        pst.setDouble(1, additionalAmount);
        pst.setInt(2, paymentId);
        pst.executeUpdate();
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Bill;
    private javax.swing.JButton CLEAR;
    private javax.swing.JTable Table;
    private javax.swing.JButton back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton remMedicine;
    private javax.swing.JButton totAmount;
    private javax.swing.JTextField totAmt;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtCustomerOrderId;
    private javax.swing.JTextField txtDeliveryDate;
    private javax.swing.JTextField txtDoctorName;
    private javax.swing.JTextField txtMedicineName;
    private javax.swing.JTextField txtOrderDate;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtTotalAmount;
    // End of variables declaration//GEN-END:variables
}
